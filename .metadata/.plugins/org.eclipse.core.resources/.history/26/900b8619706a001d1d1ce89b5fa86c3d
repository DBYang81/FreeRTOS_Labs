/*
===============================================================================
 Name        : main.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif

#include <cr_section_macros.h>

// TODO: insert other include files here

// TODO: insert other definitions and declarations here

#include "FreeRTOS.h"
#include "task.h"
#include "heap_lock_monitor.h"
#include "semphr.h"
#include <cstring>


/*****************************************************************************
 * Private types/enumerations/variables
 ****************************************************************************/

/*****************************************************************************
 * Public types/enumerations/variables
 ****************************************************************************/

/*****************************************************************************
 * Private functions
 ****************************************************************************/

/* Sets up system hardware */
static void prvSetupHardware(void)
{
	SystemCoreClockUpdate();
	Board_Init();
	/* Initial LED0 state is off */
	Board_LED_Set(0, false);
}

SemaphoreHandle_t xSemaphore;


/* function read from debug serial port */
static void vReadFromUart(void *pvParameters){

	int i = 0;
	int ch;
	char text[80];
	while(1){
		ch = Board_UARTGetChar();
		if(ch != EOF){
			if(i < 79){
				if(ch == '\n') Board_UARTPutChar('\r');
				if(ch != '\n' && ch != '\r'){
					//Board_UARTPutChar(ch);
					text[i] = ch;
					i++;
				}else{
					text[i] = '\n';
					text[i+1] = '\0';
					i = 0;
				}
				if(ch == '\r') Board_UARTPutChar('\n');
			}else{
				text[i+1] = '\0';
				i = 0;
			}
		}
		if(text[strlen(text)-1] == '\0'){
			Board_UARTPutSTR(text);
			xSemaphoreGive(xSemaphore);
		}
	}
}



/* function to blink the led */
static void vBlinkLed(void *pvParameters){

	if(xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE){
		while(1){
			Board_LED_Set(0, true);
			vTaskDelay(100);
			Board_LED_Set(0,false);
			vTaskDelay(100);
		}
	}

}


/*****************************************************************************
 * Public functions
 ****************************************************************************/

/* the following is required if runtime statistics are to be collected */
extern "C" {

void vConfigureTimerForRunTimeStats( void ) {
	Chip_SCT_Init(LPC_SCTSMALL1);
	LPC_SCTSMALL1->CONFIG = SCT_CONFIG_32BIT_COUNTER;
	LPC_SCTSMALL1->CTRL_U = SCT_CTRL_PRE_L(255) | SCT_CTRL_CLRCTR_L; // set prescaler to 256 (255 + 1), and start timer
}

}

int main(void)
{
 	prvSetupHardware();

	heap_monitor_setup();

	xSemaphore = xSemaphoreCreateBinary();

#if 1
	xTaskCreate(vReadFromUart, "readUart",
				configMINIMAL_STACK_SIZE + 64, NULL, (tskIDLE_PRIORITY + 1UL),
				(TaskHandle_t *) NULL);

	xTaskCreate(vBlinkLed, "blinkLed",
				configMINIMAL_STACK_SIZE + 64, NULL, (tskIDLE_PRIORITY + 1UL),
				(TaskHandle_t *) NULL);

#endif

	/* Start the scheduler */
	vTaskStartScheduler();

	/* Should never arrive here */
	return 1;
}


